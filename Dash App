import dash
from dash import dcc, html
import pandas as pd
import plotly.express as px
from dash.dependencies import Input, Output

# Load dataset
data = pd.read_csv("europe_sales_records_2012_2017.csv")
data['Order Date'] = pd.to_datetime(data['Order Date'])

# line Dropdown options
dropdown_options = [{'label': 'Total Revenue', 'value': 'Total Revenue'},
                    {'label': 'Total Cost', 'value': 'Total Cost'},
                    {'label': 'Total Profit', 'value': 'Total Profit'}]

# scatter drop down option
scatter_dropdown_options = [
    {'label': 'Total Profit', 'value': 'Total Profit'},
    {'label': 'Total Revenue', 'value': 'Total Revenue'},
    {'label': 'Total Cost', 'value': 'Total Cost'}
]
# Define product categories
Item_Type = [
    'Beverages', 'Clothes', 'Cereal', 'Office Supplies', 'Vegetables', 'Meat',
    'Snacks', 'Baby Food', 'Household', 'Cosmetics', 'Personal Care', 'Fruits'
]

# Define dropdown options for product categories
category_dropdown_options = [{'label': category, 'value': category} for category in Item_Type]

# Initialize app
external_stylesheets = ['Dassets/edit.css']  # Adjust the path according to your folder structure
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
app.title = "Supermarket Sales Dashboard"

# Define default bar graph
default_item_counts = data.groupby('Item Type')['Units Sold'].sum().reset_index()
default_bar_graph = px.bar(default_item_counts, x='Item Type', y='Units Sold', title="Product Items Ordered", labels={'x': 'Item Type', 'y': 'Units Sold'})

title = html.Div(
    children=[
        html.H1(
            "SUPERMARKET SALES ANALYSIS",
            className='supermarket-title'
        )
    ]
)


# Add footer
footer = html.Div(
    children=[
        html.Div(
            children=[
                html.P('Designed By: N.ARJUN -005 & C.RAGSHAN -009', className='footer-text'),
            ],
            className='footer-content'
        )
    ],
    className='footer-container',
)


# Define tab content

# Tab 1
tab1_layout = html.Div(
    children=[
        html.H2("Europe Sales Records Analysis Dashboard", className='H2'),
        html.P("This dashboard provides insights into the performance and profitability of sales across countries in the Europe region from the period of 2010 to 2017.", className='HP'),
        html.P("The dataset used in this analysis contains records from multiple sales and includes details on order dates, quantities sold, pricing, and profitability.",  className='HP'),

        html.H3("Through this analysis, the supermarket can effectively:", className='H3'),
        html.Ul( className='Hl',
                children=[
                    html.Li("Analyze which item types generate the most revenue in each country,"),
                    html.Li("Analyze the quantity of products sold for each item type across all countries to identify the countries where specific products have high sales volumes,"),
                    html.Li("Determine the country-item combinations with the highest order priority,"),
                    html.Li("Identifying which item types have high priority in each country,"),
                    html.Li("Analyze the total profit compared to the total cost to understand profitability,"),
                    html.Li("Study the trends in total revenue and total profit over the years to identify growth strategies.")
                ])
    ]
)

# Tab 2
tab2_layout = html.Div([
    html.Div([
        html.H3("Select Variable:", className='Tab_sub_title'),
        dcc.Dropdown(
            id='Line-variable-dropdown',
            options=dropdown_options,
            value='Total Revenue',
            multi=True
        ),
    ], style={'width': '30%', 'display': 'inline-block', 'float': 'left', 'left': '1%'}),

    html.Div([
        html.H3("Select Date Range:", className='Tab_sub_title'),

        dcc.RangeSlider(
    id='date-slider',
    min=data['Order Date'].min().timestamp(),
    max=data['Order Date'].max().timestamp(),
    marks={int(date.timestamp()): {'label': date.strftime('%m/%Y'), 'style': {'color': 'black', 'font-weight': 'bold'}} for date in
           pd.date_range(start=data['Order Date'].min(), end=data['Order Date'].max(), freq='6M')},
    value=[data['Order Date'].min().timestamp(), data['Order Date'].max().timestamp()]
)
,
        ], style={'width': '80%', 'position': 'relative', 'margin-bottom': '30px',
                  'left': '10%', 'display': 'inline-block'}),

        dcc.Graph(id='graphoutput', style={'width': '96%', 'height': '60vh', 'margin': 'auto', 'position': 'relative', 'bottom': '30px', 'background': 'linear-gradient(135deg, #3498db, #8e44ad)'}),
    ])



# Tab 3
tab3_layout = html.Div([
 # Radio button
    html.Div([
        html.H3("Select Variable:", className='Tab_sub_title'),
        dcc.RadioItems(
            id='variable-radio',
            options=scatter_dropdown_options,
            value='Total Profit',
            labelStyle={'display': 'inline-block', 'margin-right': '10px'}
        ),
    ], style={'width': '45%', 'display': 'inline-block', 'float': 'left'}),

# Date slider
    html.Div([
        html.H3("Select Date Range:", className='Tab_sub_title'),
        dcc.RangeSlider(
    id='date-slider-scatter',
    min=data['Order Date'].min().timestamp(),
    max=data['Order Date'].max().timestamp(),
    marks={int(date.timestamp()): {'label': date.strftime('%m\%Y'), 'style': {'color': 'black', 'font-weight': 'bold'}} for date in
           pd.date_range(start=data['Order Date'].min(), end=data['Order Date'].max(), freq='6M')},
    value=[data['Order Date'].min().timestamp(), data['Order Date'].max().timestamp()]
),
    ], style={'width': '80%', 'position': 'relative', 'bottom': '30px',
              'left': '10%', 'display': 'inline-block'}),

# Scatter plot
    dcc.Graph(id='scatter-plot', style={'width': '96%', 'height': '60vh', 'margin': 'auto', 'position': 'relative', 'bottom': '30px', 'background': 'linear-gradient(135deg, #3498db, #8e44ad)'}),
])

# Tab 4
tab4_layout = html.Div([
        html.Div([
            html.H3("Europe Map", className='Tab_sub_title'),
dcc.Graph(
    id='europe-map',
    style={'position': 'absolute', 'top': '4', 'left': '0', 'width': '50%', 'height': '80vh'},
    figure=px.choropleth(data,locations="Country",locationmode="country names",hover_name="Country",title="Europe Map",color="Total Revenue",color_continuous_scale=px.colors.diverging.Picnic,range_color=(0, 6000000)).update_geos
    (visible=False,resolution=50,showcoastlines=True,showland=True,showframe=False,projection_type='equirectangular',
    lonaxis_range=[-25, 40],  # Adjust longitude range for desired zoom
    lataxis_range=[35, 70])    # Adjust latitude range for desired zoom
),

            dcc.Graph(
                id='country-item-bar',
                figure=default_bar_graph,
                 style={'position': 'absolute', 'top': '2', 'right': '0', 'width': '50%', 'height': '72vh'}
            ),
    ])
])


# Tab 5
tab5_layout = html.Div([
html.Div
([
    dcc.Graph(
        id='pie-chart',
        figure=px.pie(data, names='Item Type', values='Units Sold', title='Pie Chart').update_traces(textinfo='percent+label'),
        style={'width': '50%', 'height': '85vh', 'float': 'left'}
    ),
html.H3("Bar Chart", className='Tab_sub_title'),
dcc.Graph(
    id='item-order-priority-bar',
    style={'position': 'absolute', 'top': '1', 'right': '0', 'width': '50%', 'height': '45vh'}
),
html.H3("Line Chart", className='Tab_sub_title'),
dcc.Graph(
    id='line-chart',
    style={'position': 'absolute', 'top': '58%', 'right': '0', 'width': '50%', 'height': '45vh'}
)
], style={'display': 'flex'})
],)



# Define tabs
tabs = dcc.Tabs(id='tabs', value='tab-1', children=[
    dcc.Tab(label='INTRODUCTION', value='tab-1', children=tab1_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
    dcc.Tab(label='LINE CHART', value='tab-2', children=tab2_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
    dcc.Tab(label='SCATTER PLOT', value='tab-3', children=tab3_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
    dcc.Tab(label='Tab 4', value='tab-4', children=tab4_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
    dcc.Tab(label='Tab 5', value='tab-5', children=tab5_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
], style={'fontFamily': 'Times New Roman',  'padding': '5px', 'width': '60%', 'margin': 'auto', 'backgroundColor': '#1b2431', 'color': '#fe0002', 'border-radius': '15px'})


# Layout of the app
app.layout = html.Div(children=[
    title, footer, tabs], style={'background': 'linear-gradient(135deg, #3498db, #8e44ad)'})


# Callback for updating line graph in Tab 2
@app.callback(
    Output(component_id='graphoutput', component_property='figure'),
    [Input(component_id='Line-variable-dropdown', component_property='value'),
     Input(component_id='date-slider', component_property='value')]
)
def update_graph(selected_variables, date_range):
    start_date = pd.to_datetime(date_range[0], unit='s')
    end_date = pd.to_datetime(date_range[1], unit='s')
    filtered_data = data[(data['Order Date'] >= start_date) & (data['Order Date'] <= end_date)]

    fig = px.line(title="Sales Over Time")

    if isinstance(selected_variables, str):  # If only one variable is selected
        selected_variables = [selected_variables]

    for variable in selected_variables:
        grouped_data = filtered_data.groupby(filtered_data['Order Date'].dt.year)[variable].sum().reset_index()
        fig.add_scatter(x=grouped_data['Order Date'], y=grouped_data[variable], mode='lines', name=variable.capitalize())

    fig.update_layout(plot_bgcolor='#d7fffd')
    fig.update_traces(line=dict(width=3))
    fig.update_xaxes(title_text="Year")

    # Assuming you want to handle the y-axis label for each selected variable
    for variable in selected_variables:
        fig.update_yaxes(title_text=variable.capitalize())

    return fig

# Callback for updating scatter plot in Tab 3
@app.callback(
    Output(component_id='scatter-plot', component_property='figure'),
    [Input(component_id='variable-radio', component_property='value'),
     Input(component_id='date-slider-scatter', component_property='value')]
)
def update_scatter_plot(selected_variable, date_range):
#Filter data based on date range
    start_date = pd.to_datetime(date_range[0], unit='s')
    end_date = pd.to_datetime(date_range[1], unit='s')
    filtered_data = data[(data['Order Date'] >= start_date) & (data['Order Date'] <= end_date)]

#scatter plot
    fig = px.scatter(filtered_data, x='Units Sold', y=selected_variable,
                     title=f'Scatter Plot: Units Sold vs {selected_variable}')

#correlation
    correlation = filtered_data['Units Sold'].corr(filtered_data[selected_variable])

 #Update layout
    fig.update_layout(title=f'Scatter Plot: Units Sold vs {selected_variable} (Correlation: {correlation:.2f})')
    fig.update_xaxes(title_text="Unit Sold")
    fig.update_yaxes(title_text=selected_variable.capitalize())

    return fig



# Callback for updating scatter plot in Tab 4
@app.callback(
    Output('country-item-bar', 'figure'),
    [Input('europe-map', 'clickData')]
)
def update_bar_graph(clickData):
    if clickData is None:
        return default_bar_graph
    else:
        selected_country = clickData['points'][0]['location']
        country_data = data[data['Country'] == selected_country]
        item_counts = country_data.groupby('Item Type')['Units Sold'].sum().reset_index()

#bar graph
        fig = px.bar(item_counts, x='Item Type', y='Units Sold', title=f'Product Items Ordered in {selected_country}')

        return fig
    
# Callback for updating scatter plot in Tab 5
@app.callback(
    [Output('line-chart', 'figure'),
     Output('item-order-priority-bar', 'figure')],
    [Input('pie-chart', 'clickData')]
)
def update_charts(clickData):
    if clickData is None:

        default_data = data.groupby('Order Date').agg({'Total Revenue': 'sum', 'Total Profit': 'sum'}).reset_index()
        default_line_fig = px.line(default_data, x='Order Date', y=['Total Revenue', 'Total Profit'], title="Total Revenue and Profit Over the Period:",
                                   color_discrete_map={'Total Revenue': 'blue', 'Total Profit': 'red'})
        
        
        default_line_fig.update_layout(legend=dict(x=0.98, y=1.5, xanchor='right', yanchor='top', font=dict(size=10)))

        default_line_fig.update_xaxes(tickformat='%Y')
        default_line_fig.update_layout(xaxis_title='Order Date', yaxis_title='Amount')
        
   
        default_order_priority_counts = data['Order Priority'].value_counts().reset_index()
        default_order_priority_counts.columns = ['Order Priority', 'Count']
        

        default_bar_fig = px.bar(default_order_priority_counts, x='Order Priority', y='Count', 
                                 title="Order Priority Distribution for Item Types:")
        default_bar_fig.update_xaxes(title_text="Order Priority")
        default_bar_fig.update_yaxes(title_text="Count")
        
        return default_line_fig, default_bar_fig

    else:

        selected_item_type = clickData['points'][0]['label']
        filtered_data = data[data['Item Type'] == selected_item_type]
        grouped_data = filtered_data.groupby(filtered_data['Order Date'].dt.year)[['Total Revenue', 'Total Profit']].sum().reset_index()
        
#line chart
        line_fig = px.line(grouped_data, x='Order Date', y=['Total Revenue', 'Total Profit'], 
                           title=f'Total Revenue and Profit Over Time for {selected_item_type}',
                           color_discrete_map={'Total Revenue': 'blue', 'Total Profit': 'red'})
        
        line_fig.update_layout(legend=dict(x=0.98, y=1.5, xanchor='right', yanchor='top', font=dict(size=10)))

        line_fig.update_xaxes(title_text="Year")
        line_fig.update_yaxes(title_text="Amount")
        
        order_priority_counts = filtered_data['Order Priority'].value_counts().reset_index()
        order_priority_counts.columns = ['Order Priority', 'Count']
        
        bar_fig = px.bar(order_priority_counts, x='Order Priority', y='Count', 
                         title=f'Order Priority Distribution for {selected_item_type}',)
        bar_fig.update_xaxes(title_text="Order Priority")
        bar_fig.update_yaxes(title_text="Count")
        
        return line_fig, bar_fig


if __name__ == '__main__':
    app.run_server(debug=True)
