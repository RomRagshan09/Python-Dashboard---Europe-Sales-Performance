import dash
from dash import dcc, html
import pandas as pd
from dash.dependencies import Input, Output
import plotly.express as px

# Load dataset
data = pd.read_csv(r"F:\HND.DS\py.dashboard\europe_sales_records_2012_2017.csv")
data['Order Date'] = pd.to_datetime(data['Order Date'])

# line Dropdown options
dropdown_options = [{'label': 'Total Revenue', 'value': 'Total Revenue'},
                    {'label': 'Total Cost', 'value': 'Total Cost'},
                    {'label': 'Total Profit', 'value': 'Total Profit'}]

# scatter drop down option
scatter_dropdown_options = [
    {'label': 'Units Sold', 'value': 'Units Sold'},
    {'label': 'Total Revenue', 'value': 'Total Revenue'},
    {'label': 'Total Cost', 'value': 'Total Cost'}
]                    

# Define product categories
Item_Type = [
    'Beverages', 'Clothes', 'Cereal', 'Office Supplies', 'Vegetables', 'Meat',
    'Snacks', 'Baby Food', 'Household', 'Cosmetics', 'Personal Care', 'Fruits'
]

# Define dropdown options for product categories
category_dropdown_options = [{'label': category, 'value': category} for category in Item_Type]

# Initialize Dash app
app = dash.Dash(__name__)
app.title = "Supermarket Sales Dashboard"

# Add title
title = html.Div(
    children=[
        html.H1(
            "SUPERMARKET SALES ANALYSIS",
            style={'font-size': '50px', 'text-align': 'center', 'font-weight': 'bold', 'color': 'white',
                   'backgroundColor': 'black', 'margin': '8px', 'padding': '5px'}
        )
    ]
)

# Add footer
footer = html.Div(
    children=[
        html.Div(
            [
                html.P('Designed By: N.ARJUN -005 & C.RAGSHAN -009', style={'font-size': '12px', 'font-weight': 'bold', 'color': 'white','fontFamily': 'Roboto'}),
            ],
            style={'border': '2px solid #ccc', 'width': '100%', 'margin': 'auto',
                'background-color': 'purple', 'padding': '2px', 'border-radius': '1px', 'text-align': 'center','fontStyle': 'italic'}
        )
    ],
    style={'position': 'fixed', 'bottom': '9px', 'left': '10px', 'z-index': '999'}
)

# Define tab content

# Tab 1
tab1_layout = html.Div(
    children=[
        html.H2("Europe Sales Records Analysis Dashboard", style={'text-align': 'center', 'margin-top': '20px', 'font-size': '40px', 'font-weight': 'bold'}),
        html.P("This dashboard provides insights into the performance and profitability of sales across countries in the Europe region from the period of 2010 to 2017.", style={'text-align': 'center', 'margin-top': '10px', 'font-size': '23px'}),
        html.P("The dataset used in this analysis contains records from multiple sales and includes details on order dates, quantities sold, pricing, and profitability.", style={'text-align': 'center', 'margin-top': '10px', 'font-size': '23px'}),

        html.H3("Through this analysis, the supermarket can effectively:", style={'text-align': 'center', 'margin-top': '40px', 'font-size': '27px', 'font-weight': 'bold'}),
        html.Ul(style={'text-align': 'left', 'margin-left': '75px', 'font-size': '23px', 'margin-top': '40px'},
                children=[
                    html.Li("Analyze which item types generate the most revenue in each country,"),
                    html.Li("Analyze the quantity of products sold for each item type across all countries to identify the countries where specific products have high sales volumes,"),
                    html.Li("Determine the country-item combinations with the highest order priority,"),
                    html.Li("Identifying which item types have high priority in each country,"),
                    html.Li("Analyze the total profit compared to the total cost to understand profitability,"),
                    html.Li("Study the trends in total revenue and total profit over the years to identify growth strategies.")
                ])
    ]
)

# Tab 2
tab2_layout = html.Div([
        html.Div([
            html.H3("Select Variable:", style={'font-size': '20px', 'text-align': 'center', 'font-weight': 'bold',
                                                'color': 'black', 'margin': '6px', 'padding': '4px'}),
            dcc.Dropdown(
                id='Line-variable-dropdown',
                options=dropdown_options,
                value='Total Revenue'  # Default selection
            ),
        ], style={'width': '45%', 'display': 'inline-block', 'right': '1%', 'float': 'right'}),
        html.Div([
            html.H3("Select Product Categories:", style={'font-size': '20px', 'text-align': 'center', 'font-weight': 'bold',
                                                            'color': 'black', 'margin': '6px', 'padding': '4px'}),
            dcc.Dropdown(
                id='Item_Type',
                options=category_dropdown_options,
                multi=True,  # Allow multiple selections
                value=[]  # Default value
            ),
        ], style={'width': '45%', 'display': 'inline-block', 'left': '1%'}),
    
        html.Div([
            html.H3("Select Date Range:", style={'font-size': '20px', 'text-align': 'center', 'font-weight': 'bold',
                                                    'color': 'black', 'margin': '6px', 'padding': '4px'}),
            dcc.RangeSlider(
                id='date-slider',
                min=data['Order Date'].min().timestamp(),
                max=data['Order Date'].max().timestamp(),
                marks={int(date.timestamp()): date.strftime('%m/%Y') for date in
                       pd.date_range(start=data['Order Date'].min(), end=data['Order Date'].max(), freq='6M')},
                value=[data['Order Date'].min().timestamp(), data['Order Date'].max().timestamp()]
            ),
        ], style={'width': '80%', 'position': 'relative', 'margin-bottom': '30px',
                  'left': '10%', 'display': 'inline-block'}),

        dcc.Graph(id='graphoutput', style={'width': '96%', 'height': '60vh', 'margin': 'auto', 'position': 'relative', 'bottom': '40px'}),
    ])


# Tab 3
tab3_layout = html.Div([
    # Dropdown for selecting variable
    html.Div([
        html.H3("Select Variable:", style={'font-size': '20px', 'text-align': 'center', 'font-weight': 'bold',
                                            'color': 'black', 'margin': '6px', 'padding': '4px'}),
        dcc.Dropdown(
            id='variable-dropdown',
            options=scatter_dropdown_options,
            value='Total Revenue'  # Default selection
        ),
    ], style={'width': '45%', 'display': 'inline-block', 'right': '1%', 'float': 'right'}),

    # Dropdown for selecting product categories
    html.Div([
        html.H3("Select Product Categories:", style={'font-size': '20px', 'text-align': 'center', 'font-weight': 'bold',
                                                      'color': 'black', 'margin': '6px', 'padding': '4px'}),
        dcc.Dropdown(
            id='product-categories-scatter',
            options=category_dropdown_options,
            multi=True,  # Allow multiple selections
            value=[]  # Default value
        ),
    ], style={'width': '45%', 'display': 'inline-block', 'left': '1%'}),

    # Date slider
    html.Div([
        html.H3("Select Date Range:", style={'font-size': '20px', 'text-align': 'center', 'font-weight': 'bold',
                                              'color': 'black', 'margin': '6px', 'padding': '4px'}),
        dcc.RangeSlider(
            id='date-slider-scatter',
            min=data['Order Date'].min().timestamp(),
            max=data['Order Date'].max().timestamp(),
            marks={int(date.timestamp()): date.strftime('%m\%Y') for date in
                   pd.date_range(start=data['Order Date'].min(), end=data['Order Date'].max(), freq='6M')},
            value=[data['Order Date'].min().timestamp(), data['Order Date'].max().timestamp()]
        ),
    ], style={'width': '80%', 'position': 'relative', 'margin-bottom': '30px',
              'left': '10%', 'display': 'inline-block'}),

    # Scatter plot
    dcc.Graph(id='scatter-plot'),
])


tab4_layout = html.Div("Content of Tab 4")
tab5_layout = html.Div("Content of Tab 5")

# Define tabs
tabs = dcc.Tabs(id='tabs', value='tab-1', children=[
    dcc.Tab(label='INTRODUCTION', value='tab-1', children=tab1_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
    dcc.Tab(label='LINE CHART', value='tab-2', children=tab2_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
    dcc.Tab(label='SCATTER PLOT', value='tab-3', children=tab3_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
    dcc.Tab(label='Tab 4', value='tab-4', children=tab4_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
    dcc.Tab(label='Tab 5', value='tab-5', children=tab5_layout, style={'backgroundColor': '#00ffff', 'color': 'black', 'font-size': '15px', 'font-weight': 'bold', 'border-radius': '25px'}),
], style={'fontFamily': 'Times New Roman',  'padding': '5px', 'width': '60%', 'margin': 'auto', 'backgroundColor': '#1b2431', 'color': '#fe0002', 'border-radius': '15px'})


# Layout of the app
app.layout = html.Div(children=[
    title, footer, tabs])
#call back for updating line graph
@app.callback(
    Output(component_id='graphoutput', component_property='figure'),
    [Input(component_id='Line-variable-dropdown', component_property='value'),
     Input(component_id='date-slider', component_property='value'),
     Input(component_id='Item_Type', component_property='value')]
)

def update_graph(selected_variable, date_range, selected_categories):
    start_date = pd.to_datetime(date_range[0], unit='s')
    end_date = pd.to_datetime(date_range[1], unit='s')
    filtered_data = data[(data['Order Date'] >= start_date) & (data['Order Date'] <= end_date)]

    # Filter data based on selected product categories
    if selected_categories:
        filtered_data = filtered_data[filtered_data['Item Type'].isin(selected_categories)]

    # Group by selected variable
    grouped_data = filtered_data.groupby(filtered_data['Order Date'].dt.year)[selected_variable].sum().reset_index()

    fig = px.line(grouped_data, x='Order Date', y=selected_variable, title=f'{selected_variable.capitalize()} by year', color_discrete_sequence=['#26538d'])
    fig.update_layout(plot_bgcolor='#d7fffd')
    fig.update_traces(line=dict(width=4))

    fig.update_xaxes(title_text="Year")
    # update graph title
    fig.update_yaxes(title_text=selected_variable.capitalize(),
                     range=[grouped_data[selected_variable].min(), grouped_data[selected_variable].max()])
    return fig

## Callback for updating scatter plot in Tab 3
@app.callback(
    Output(component_id='scatter-plot', component_property='figure'),
    [Input(component_id='product-categories-scatter', component_property='value'),
     Input(component_id='variable-dropdown', component_property='value'),
     Input(component_id='date-slider-scatter', component_property='value')]
)
def update_scatter_plot(selected_categories, selected_variable, date_range):
    # Filter data based on selected product categories and date range
    start_date = pd.to_datetime(date_range[0], unit='s')
    end_date = pd.to_datetime(date_range[1], unit='s')
    
    if selected_categories:  # If any product category is selected
        filtered_data = data[(data['Item Type'].isin(selected_categories)) & 
                             (data['Order Date'] >= start_date) & 
                             (data['Order Date'] <= end_date)]
    else:  # If no product category is selected, consider all products
        filtered_data = data[(data['Order Date'] >= start_date) & 
                             (data['Order Date'] <= end_date)]

    # Create scatter plot
    fig = px.scatter(filtered_data, x='Total Profit', y=selected_variable,
                     title=f'Scatter Plot: Total Profit vs {selected_variable}')

    # Calculate correlation
    correlation = filtered_data['Total Profit'].corr(filtered_data[selected_variable])

    # Update layout
    fig.update_layout(title=f'Scatter Plot: Total Profit vs {selected_variable} (Correlation: {correlation:.2f})')
    fig.update_xaxes(title_text="Total Profit")
    fig.update_yaxes(title_text=selected_variable.capitalize())

    return fig


if __name__ == '__main__':
    app.run_server(debug=True)
